==========================JavaScript简介========created by qq on 2019.6.21 1:09====================================================

    1.JavaScript简史

    2.JavaScript实现

    一个完整的JavaScript包括1.核心 （ECMAScript）2文档对象模型（DOM）3浏览器对象模型（BOM）
           --ECMAScript提供核心语言功能(规定语言的下列组成部分：语法，类型，语句，关键字，保留字，操作符，对象)
           --DOM（Document Object Model）提供访问和操作网页内容的方法和接口
           --BOM（Browser Objct Model）提供与浏览器交互的方法和接口

        ECMAScript，ECMAScript与Web浏览器没有依赖关系，Web浏览器只是ECMAScript实现可能的宿主环境之一，宿主环境不仅提供基本的ECMAScript的实现
        同时，也会提供语言的扩展，以便语言与环境之间的交互，其他的宿主环境包括Node


===========================在HTML中使用JavaScript===================================================================================

     1<script>元素

         元素包含六个属性：1.async：立即下载脚本，但不妨碍页面其他操作
                         2.charset 标识通过src属性指定代码的字符集
                         3.defer 脚本可以延迟到文档被完全解析或显示之后在执行
                         4.src 包含要执行代码的外部文件
                         5.type 编写代码使用的脚本语言的内容类型
         1.1.使用<script>元素的两种方式：直接在页面中嵌入，包含外部js文件

              *包含在<script>元素内部的js代码自上而下依次解释，并且解释器对<script>元素内部的所有代码求值完毕之前（包括下载外部js文件），页面中的其余内容都不会被浏览器加载或者显示
              <script>元素还可以通过src包含外域的js文件，指向当前html页面之外的某个域完整的url：
                    <script type="text/javascript" src="https://www.hjkh.com.afile.js" ></script>
              只要不出现async和defer浏览器会依照<script>元素出现的顺序 依次解析js文件
         1.2.标签的位置

              *一般放在<body>
                         <这里是页面内容>
                         <script src=""></script>
                      </body>
                 因为如果放在<head>元素内，以为这必须等到全部的JavaScript文件依次 被下载 解析 执行完成以后才开始呈现页面内容，势必会有延迟
         1.3延迟脚本 defer="defer" 监本被延迟到整个页面解析完成后在运行，立即下载，延迟执行。
         1.4异步脚本 async属性 只用于外部脚本 并告诉浏览器立即下载 ，不保证两个<script> 执行先后顺序

     2<noscript>元素
          当浏览器不支持javascript时 可以让页面平稳退化
          以下两种情况,noscript元素包含的内容才会被显示出来
            a.浏览器不支持脚本
            b.浏览器支持脚本但脚本被禁用

     ===================================基本概念=================================================================================

      1.语法
            1.1 严格模式：
            1.2 数据类型： Undefined Null Boolean Number String Object
               --Number 表示整数和浮点数 ,数值范围Number.MAX_VALUE  Number.MIN_VALUE超出范围为Infinity
               --NaN （非数值）是一个特殊数值  alert（NaN==NaN） false
               --数值转换 Number()可以用于任何数据类型
                        ParseInt() ParseFloat()制转换字符串

               --String ECMAScript规定字符串一旦创建不可变 ，要改变某个变量保存的字符串 首先要销毁原来的字符串，
               然后再创建一个包含新值的字符串填充该变量
               --转换为字符串  toString()  除了undefined 和null 其他类型都有toString()方法

               --Object类型 ：一组数据和功能的组合 Object类型所具有的任何属性和方法 也存在于更具体的对象中
                   属性方法： constructor hasOwnProperty(propertyName) isPrototypeOf(Object)
                            propertyIsEnumberable(propotyName) toLocalString() toString() valueOf()

            1.3 for-in 语句 用来枚举对象中的属性

            1.4 label语句 label语句可以在代码中添加标签  label:statement
                start:
                  for(var i=0;i<cont;i++){
                     for(var j=0;j<10;j++){
                     if(){
                        break start;
                        }
                     }
                }
                break和continue语句可以和label联合使用 从而返回到代码特定的位置

      2 函数

          function functionName(arg0,arg1,....argn){
             statement;
          }
        --理解参数：
           ECMAScript的参数在内部使用一个数组表示的 函数接受的始终是这个数组，不用关心数组中包含的参数个数
           可以通过arguments对象访问参数数组
           ---例 function howManyArgs(){
                    alert(arguments.length);
                 }
                 howManyArgs('hja',232);
              ECMAScript没有函数的重载 但可以使用传入参数的不同和arguments对象的使用实现重载的效果，根据参数的不同得到不同的结果


===============================变量，作用域和内存问题========================================================================

      1.基本类型和引用类型的值
         再将一个值赋值给变量时，解析器必须确定这个值是基本数据类型还是引用数据类型
        --基本数据类型复制：（基本类型的值在内存中占据固定大小的空间，因此保存在栈内存） 创建新对象复制值到新对象内存
          引用数据类型复制：（堆内存） 创建新变量 复制指向这个对象的指针到新内存中

          确定一个值是那种基本类型使用 typeof  确定一个值是那种引用类型使用instanceof

        --传递参数：函数参数是按值传递的，基本类型参数传递如同基本数据类型变量的复制
                  引用类型值传递和引用类型变量复制一样
                  也就是说基本变量的传值复制值到arguments数组中的某一个元素，而引用类型是将地址赋值给arguments某一元素

      2.执行环境（全局和函数执行环境）和作用域

           执行环境：定义了变量和函数有权访问的其他数据，每个执行环境都有一个与之关联的变量对象，
           环境中定义的所有变量和函数都保存在这个对象中。编写代码无法访问此对象，但解析器处理数据
           时会在后台使用他

           每次进入一个新的执行环境都会创建一个用于搜索变量和函数的作用域链

        --全局对象是最外围的执行环境，根据ECMAScript的宿主环境的不同，表示执行环境的对象也不相同。
        web浏览器中，全局对象是window只有当关闭网页或者浏览器 全局执行环境才会被销毁。每个函数都有
        自己的执行环境，当执行流进入一个函数后，函数的环境就被推入一个环境栈中，而在函数执行之后将其弹出。
        --当代码在一个环境中执行时，会创建变量对象的一个作用域链  ，作用于链的用途是保证对执行环境可以访问的
          所有变量和函数有序访问，作用域链的前端始终是执行代码所在环境的变量对象。

        --延长作用域try-catch语句catch块和with语句
          执行环境类型总两类  全局和局部（函数）
        --没有块级作用域
             例如-
               if（true）{
                 var color=‘blue’
               }
               alert（color）
             在其它语言中，color会在if语句执行完毕后销毁，js语言中会将变量添加到当前的执行环境中。
             * var声明的变量会自动添加到最接近的环境中。

      3.垃圾收集

        js具有自动的垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存，垃圾收集器会周期性的执行，释放
          不用的内存

        用于标识无用变量的策略通常浏览器实现中有两种方法：标记清除和引用计数

=================================引用类型======================================================

      引用类型的值是引用类型的一个实例，在ECMAscript中，引用类型是一种数据结构，用于将数据和功能组织到一起，

      1.Object类型
        创建：(1)var person=new Person();
                person.name='dssda';
             (2)对象字面量表示法：
                var person={
                               name:'hello',
                               age:'78'
                            }
              或
              var person={}
              person.name='huihis'
        访问属性，person.name 或 person['name']

      2Array类型
        ECMAscript的数组是数据的有序列表，每一项可以保存任何的数据类型，数组大小动态调整，随数据添加自动增长

        创建（1）new Array()  或 new Array('red','green','dada');
            (2)字面量  var person=['blue' ,'grren','red']
            访问或替换数组的值 person[0]='yellow' person[3]='black'索引超出了数组现有项数，数组会自动增加
            至该索引加1的长度

            length属性，不只是只读，可以通过设置这个属性，从数组的末尾移除项或向数组中添加新项
               var color=['sd','qw']
               color.length=4；向数组中color末尾添加两项，
               color[length]='dsad'数组末尾自增一项并赋值，length属性自动更新

        检测数组: vaues instanceof Array    或者   Array.isArray(values)
        转换方法：color.toString()
                color.valueOf();
                color.join('符号')  都会转换为逗号分隔字符串
        栈方法：push()推入 pop()删除 两方法实现栈的行为
        队列方法 ： push()末尾推入 shift()移除第一项实现队列的行为
        重排序方法：revserse() sort();
                  var values=[0,1,5,10,15];
                  values.reverse()//15,10,5,1,0
                  values.sort()//1,1,10,15,5
                  为实现排序sort()方法会调用每个数组项的toString()方法，先转换为字符串，然后比较字符串所以出现以上结果
                  ，因此为了实现真正排序 sort()接受一个比较函数作为参数

                  function compare(value1,value2){
                     if(value1>value2) return 1
                     else if(value1<value2) return -1
                     else return 0
                  }

                  values.sort(compare) //0,1,5,10,15
        迭代方法：ECMAScript维数组定义了五个迭代方法，every(),filter(),forEach(),map(),some()

      3.Date类型  new Date()

      4.RegExp类型

        var expression=/pattern/flags;

        g:(global)表示全局模式，即模式将被引用于所有的字符串，而非第一个匹配项停止

        i:匹配项忽略大小写

        m：多行模式

      5*Function类型
        在ECMAScript中，函数实际上是一个对象，每个函数都是Function类型的实例，与其他引用类型一样具有属性和方法
        函数名是一个指向函数对象的指针

        --1.定义函数：
           （1）函数声明语法定义：function sum(num1,num2){
                                 return sum1+sum2;
                              };
           (2) 函数表达式定义函数：var sum=function(sum1,sum2){
                                           return sum1+sum2;
                                         };
           (3)Function 构造函数法：var sum=new Function('num1','num2','return sum1+sum2');
              最后一个参数必须是函数体，此法不推荐

        --2.没有重载（深入理解）
          为什么不能重载 ，因为函数是对象，函数名其实是指向函数的指针，那么两个同名函数，虽然参数不同也就
          是同一个变量 ，后边定义的函数会覆盖前面的函数对象，指针会指向后面定义的函数如下：

                var addsom=function(num){   |    function addsom(num){
                   return num+100;          |       return num+100;
                }                           |      }

                addsom=function(num){       |    function addsom(num){
                   return num+200;          |      return num+200;
                }                           |    }
          可以看出变量addsom最终指向第二个人函数对象。

          ***这里可以用函数的参数属性，arguments 通过判断参数的不同，实现不同逻辑来弥补js没有重载的缺憾

        --3函数声明和表达式的区别

          解析器在执行环境中加载数据时，会率先读取函数声明，并使其在执行任何代码之前可用，而对于函数表达式
          必须等解析器执行到他所执行的代码行才会解释执行 p112

          alert(sum(10,20));   //30
          function sum(num1,num2){
            return num1+num2;
          }

          alert(sum(10,20));   //错误
           var sum= function(num1,num2){
             return num1+num2;
          }
        --4作为值的函数：
           ECMAScript中函数名是变量，函数可以做为值来使用，可以当参数传递，也可以作为结果返回

           function callSomeFunction(someFunction,someArgument){
               return someFunction(someArgument)
           }
           第一个传函数，第二个个传函数的值

           function add（num）{
             return num+10;
           }

           function getGreeting(name){
              return "hello"+name;
           }

           //调用
           var result=callSomeFunction(add,10)
           alert(result)//20

           var result1=callSomeFunction(getGreeting,"qingqiang");

           alert(result1)//hello qiangqiag

        --5 函数内部属性 arguments 和 this

           arguments属性，是一个类数组对象，包含着传入函数的所有参数，并且arguments对象有一个callee属性
           该属性是个指针，指向拥有这个arguments对象的函数

             实现阶乘例子

            //传统方法 （要是引用函数用了其他名字 此方法无效，使用arguments.callee无影响）

             function factorial(num){
               if(num<=1){
                  return 1;
               } else {
                  return num * factorial(num-1);
               }
             }
            //使用arguments.callee

             function factorial(num){
               if(num<1){
                return 1;
               } else {
                 return num * arguments.callee(num-1);
               }
             }

           this引用的是函数执行的环境对象

             window.color='red'

             var o={color :blue}；

             function sayColor(){
               alert(this.color)  //red 此时this值的是全局对象 window
             }

             o.sayColor=sayColor;
             o.sayColor()  //blue  //this 引用对象o

        --6 函数的属性和方法 ******************p116重要
           ECMAScript函数是对象，则有属性和方法
             1，length  propotype(ECMAS中引用类型的propotype属性包含对象所有实例方法)

             2，每个函数包含 apply() 和call()方法，在特定的作用域中调用方法，等于设置函数体内this值

      6.基本包装类型（浏览书118）

============================面向对象程序设计==================================================

      ECMAScript对象的定义为：无序属性的集合，其属性可以包括基本值，对象或者函数（可以认为对象认为是散列表
                          也即使一组名值对，其中值可以是数据或是函数）

      1对象定义：创建对象最简单的是创建一个Object实例，然后再添加属性方法

        (1)var person=new Object();
           person.name='qiangqiang';
           person.age='78'
           person.sayName=function(){
             alert(this.name);
           }
        (2)对象字面量创建
           var person={
              name:'qiangqiang',
              age:'23',
              sayName:function(){
                  alert(this.name);
              }
           }
      2属性类型：
        ECMAScript中两种属性：数据属性和访问器属性
          数据属性包含数据值的位置，在这个属性中可以读取和写入值，有4个描述其行为的特性。
          访问器属性不包含数据值，包含一对getter和setter函数，在读取属性时调用getter在访问属性会调用setter
          包含4个特性。

        （1）数据属性：Configurable,Enumerable,Writable,Value
         如上面直接在对象上定义属性， 对象每个属性的Configurable,Enumerable,Writable 特性默认为true
         Value被设置为特定值。
          ---要修改数据默认属性特性，必须用Object.defineProperty()方法
          --例
             var person={}
             Object.definePeoperty(person,name,{
                writable:false,
                value:'hello'
             })

             alert(person.name);//hello
             person.name='Greg';
             alert(person.name)//hello

         (2)访问器属性：Configurable,Enumerable,Get,Set   p141

            --例
              var book={
                _year:2004,
                edition:1
              }
              Object.defineProperty(book,'year',{
                get:function(){
                   return this._year;
                }
                set:function(newValue){
                   if(newValue>2004){
                      this._year=newValue;
                      this.edition+=newValue-2004;
                   }
                }
              });

              book.year=2005;
              alert(book.edition);//2

      3.定义多个属性和访问属性特性  p144
         利用Object.defineProperties()方法定义多个属性
         --例
            var book={}
            Object.definePropeties(book,{
                _year:{
                  writable:true,
                  value:2004
                },  //数据属性
                edition:{
                  writable:true,
                  value:1
                },//数据属性

                year:{
                  set:function(newValue){
                     if(newValue>2004){
                       this._year=newValue;
                       this.edition+=newValue-2004;
                     }
                  }
                  get:function(){
                     return this._year;
                  }
                }
            })

            使用ECMAScript的Object.getOwnPropertyDescriptor()可以去的给定属性的描述符

            ---例
               var description=Object.getOwnPropertyDescriptor(book,"_year");
               alert(description.value);//2004
               alert(description.configurable);//false


      4创建对象
         虽然Object构造函数或者对象字面量都可以创造单个对象，但是使用一个接口创建很多对象，会产生大量的重复代码

        (1)工厂模式：
               function createPerson(name,age,job){
                    var o=new Object();
                    o.name=name;
                    o.age=age;
                    o.job=job;
                    o.sayName:function(){
                      alert(this.name);
                    }
                    return o;
               }
             var person1=createPerson('qq',78,'software Engineer');
             var person2=createPerson('xx',687,'Dpoctor');

             工厂方法不能解决对象识别问题 即不知道对象类型，因此延伸出构造函数模式方法

        (2)构造函数模式：
            除了ECMAScript原生特定类型对象如Array 和Object有原生构造函数，我们也可以创建自定义构造函数，
            定义自定义对象类型的属性和方法

            --例
               function Person(name,age,job){
                  this.name=name;
                  this.age=age;
                  this.iob=job;
                  this.sayName=function(){
                      alert(this.name);
                  }
               }
            var person1=new Person('qq','322','dassadas');
            创建person实例：（1）创建新对象（2）将构造函数的作用域赋给新对象（3）执行构造函数中的代码（4）返回新对象

            person1指向Person的一个实例，并且有constructor属性指向Person
            alert(person1.construct=Person);
            上面例子中创建的对象，即是Object实例也是Person实例

            ***将构造函数当做函数

                构造函数和其它函数唯一的不同在于调用的方式不同，任何函数只要通过new操作符来调用，那么它就可以作为构造函数
                任何函数包括之前定义的Person构造函数 只要不通过new操作符调用那他也和普通函数一样

                //当做构造函数调用
                    var person = new Person('hkja',678,'kshaldh');
                    person.sayName();//hkja
                //作为普通函数调用
                    Person('Grey','546','doctor');
                    window.sayName();//添加到window
                //在另一个作用域调用
                    var o=new Object();
                    Person.call(o,'kristen',25,'23dada');
                    o.sayName();//  kristen

            ***构造函数模式存在缺点：每个方法在每个实例上重新创建一遍，所以不同实例对象上的同名方法是不一样的
            对象[ 如上面的sayName()]然而创建两个一样的函数完全没必要，为解决这种问题，延伸出原型模式


        (3)原型模式：（原生引用类型Object Array String采用此模式创建）

            我们创建的每一个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的
            用途是包含可以由特定类型的所有实例共享的属性和方法。也就是说prototype是通过调用构造函数创建的那个对象的
            原型对象。使用原型对象好处让所有的对象实例共享其属性和方法

            --例
              function Person(){}
              Person.prototype.name='qq';
              Person.prototype.age='26';
              Person.prototype.job='software engineer';
              Person.prototype.sayName=function(){
                 alert(this.name);
              }

              var person1=new Person();
              person1.sayName();//qq

              var person2=new Person();
              person2.sayName();//qq

              alert(person1.sayName==person2.sayName);//true

             ****理解原型对象：p148
                无论何时，只要创建一个新函数，就会为该函数创建一个prototype属性，并指向函数的原型对象，所有原型对象
                都会自动获取一个constructor属性，此属性是一个指向prototype属性所在函数的指针
                  也即 Person.prototype.constructor->Person

                当代码读取某个对象的某个属性时，都会执行一次搜索，首先从本对象实例本身开始，如果有给定名字的属性直接返回
                否则，继续搜索指针指向的原型对象，查找改名字的属性值

                --例
                               function Person(){}
                               Person.prototype.name='qq';
                               Person.prototype.age='26';
                               Person.prototype.job='software engineer';
                               Person.prototype.sayName=function(){
                                  alert(this.name);
                               }

                                var person1=new Person();
                                person1.sayName();//qq

                                var person2=new Person();
                                person1.name='grey'
                                alert(person1.name)//grey  来自实例
                                alert(person2.name)//qq  来自原型


             ***更简洁的原型语法

                function Person(){}

                Person.prototype={
                   name:'qq',
                   age:27,
                   job:'software engineer',
                   sayName:function(){
                     alert(this.name);
                   }
                }

               在上面的代码中，Person.prototype设置为等于一个以字面量形式创建的新对象，最终结果和上面原型模式
               一样，但是由于没创建一个函数就回创建一个原型对象并且自动获取constructor属性，而我们这里使用的语法本质上
               是重写了磨人的prototype属性，因此constructor变成新对象的constructor指向Object构造函数

             ***原型动态性p156

               var friend=new Person();
               Person.prototype.sayHi=function(){alert("hi")}
               friend.sayHi();//hi

                var friend=new Person();
                Person.prototype={
                   constructor:Person;
                   name:'qq',
                   age:34,
                   job:'software engineer'
                   sayName:function(){
                     alert(this.name);
                   }
                }
                friend.sayHi();//error 出错！！！

                函数Person内部指针指向用字面量定义新创建的原型对象
                实例中的指针指向函数自动生成的最初的原型对象，所以报错。详情见p157

            ****原型模式缺点：如果远新对象中的属性包含的是引用类型的值 ，那么在一个实例对象中改变了此属性值其他实例
                           都会改变。


        (4)组合使用构造函数模式和原型模式（目前ECMAScript自定义类型使用最广泛的模式）

           function Person(name,age,job){
             this.name=name;
             this.age=age;
             this.job=job;
             this.friends=['nn','yy'];
           }

           Person.prototype={
             constructor:Person,
             sayName:function(){
                alert(this.name);
             }
           }

        (5)动态原型模式

        (6)寄生构造函数模式

        (7)稳妥构造函数模式


      5.继承

        (1)原型链实现继承  p162

             将一个类型的实例赋给另一个构造函数的原型实现的。

          function superObj(){
            this.name='qq';
          }

          superObj.prototype.getSuperObj=function(){
             return this.name;
          }

          function subObj(){
             tis.subName='xx';
          }

          //继承superObj

          subObj.prototype=new superObj();
          subObj.prototype.getSubObj=function(){
             return this.subName;
          }

          var instance=new subObj();
          alert(instance.getSuperObj);//qiangqiang

        **所有函数的默认原型其实都是Object的实例
          通过原型链实现继承不能用对象字面量创建原型方法，
          引用类型值的原型属性会被所有实例共享（原型链问题1）因为所有实例的默认指针指向同一个原型对象
          --例如
            function father(){
              this.color=['red','green','yellow']
            }
            father.prototype.getColor=function{
               alert(this.color.toString);
            }
            function kid(){}
            kid.prototype=new father();

            var instance1=new kid();
            var instance2=new kid();

            也就是说上面的代码中，instance1和instance2实例内部的[[prototype]]指针指向相同的原型对象，也即是new father()实例
            这个对象中的color对象是个数组实例，那么，通过instance1或instance2改变color的属性后其他的对象也都变 这就是原型链继承最大缺陷

        （2）借用构造函数的方法实现继承，解决上面缺陷

            这种方法为在子类型的构造函数内部调用超类型构造函数，由于在ECMAScript函数为在特定环境中执行代码的对象，因此通过使用
            apply()和call()方法也可以在新对象上执行构造函数
             --例
               function superObj(name){
                 var color=['red','green','yellow'];
                 this.name=name;
               }
               function subObj(){
                  subObj.call(this,'qiangqiang');
               }

               var instance=new subObj();
               var instance2=new subObj();
               alert(instance.name);//qiangqiang

               由于每个实例都有自己的color副本 所以两个实例不会同时影响color对象属性

         (3)组合继承（将原型链和借用构造函数的技术结合到一起）

            思路：使用原型链来实现对原型属性和方法的继承，而通过借用构造函数来实现对实例的继承

            function superType(name){
             this.name=name;
             this.colors=['red','green','yellow'];
            }

            superType.prototype.sayName=function(){
              alert(this.name);
            }

            function subType(name,age){
              this.age=age;
              继承实例属性
              superType.call(this,name);
            }
            //继承方法
            subType.prototype=new superType();
            subType.prototype.constructor=subType;

            var instance =new subType();

            这样instance实例就对超类型实例继承，每个实例中都有colors副本，不从在操作实力出现修改同一个对象属性的缺陷
            并且对原型对象公用的方法也继承了原型中的方法

         (4)原型式继承
         (5)寄生式继承
         (6)寄生组合式继承


  ==============================================函数表达式======================================================

       函数表达式是中一个即强大又令人困惑的特性，定义函数的方式有（1）函数声明（2）函数表达式
       function functionName(arg0,arg1){
           //函数体
       }   //函数声明
       浏览器给函数定义了一个非标属性name属性，通过这个属性可以访问到函数指定的名字，这个属性的值永远等于更在function关键字
       后面的 标识符
       函数声明有函数声明提升特性，浏览器在执行代码前先读取函数声明

       var functionName=function(arg0,arg1...){
         //函数体
       } //函数表达式
       创建一个函数对象赋值给变量functionName，这样创建的函数叫做 匿名函数 并且其name属性为空字符串

       *函数表达式和其他表达式一样必须先赋值再使用


   1.闭包



